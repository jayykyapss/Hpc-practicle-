#include <iostream>
#include <vector>
#include <chrono>
#include <omp.h>

using namespace std;
using namespace std::chrono;

// Sequential Bubble Sort
void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

// Parallel Bubble Sort
void parallelBubbleSort(vector<int>& arr) {
    int n = arr.size();
    #pragma omp parallel for
    for (int i = 0; i < n-1; i++) {
        #pragma omp parallel for
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

// Merge Sort Helper Function
void merge(vector<int>& arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++) {
        L[i] = arr[l + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = arr[m + 1 + j];
    }

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Sequential Merge Sort
void mergeSort(vector<int>& arr, int l, int r) {
    if (l >= r) {
        return;
    }
    int m = l + (r - l) / 2;
    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);
    merge(arr, l, m, r);
}

// Parallel Merge Sort
void parallelMergeSort(vector<int>& arr, int l, int r) {
    if (l >= r) {
        return;
    }
    int m = l + (r - l) / 2;
    #pragma omp parallel sections
    {
        #pragma omp section
        parallelMergeSort(arr, l, m);
        #pragma omp section
        parallelMergeSort(arr, m + 1, r);
    }
    merge(arr, l, m, r);
}

int main() {
    int n = 10000;
    vector<int> arr(n), arr_copy(n);
    // Initialize array with random values
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 10000;
        arr_copy[i] = arr[i];
    }

    // Measure time for sequential Bubble Sort
    auto start = high_resolution_clock::now();
    bubbleSort(arr);
    auto stop = high_resolution_clock::now();
    auto seq_bubble_time = duration_cast<milliseconds>(stop - start).count();

    // Measure time for parallel Bubble Sort
    start = high_resolution_clock::now();
    parallelBubbleSort(arr_copy);
    stop = high_resolution_clock::now();
    auto par_bubble_time = duration_cast<milliseconds>(stop - start).count();

    // Measure time for sequential Merge Sort
    start = high_resolution_clock::now();
    mergeSort(arr, 0, n - 1);
    stop = high_resolution_clock::now();
    auto seq_merge_time = duration_cast<milliseconds>(stop - start).count();

    // Measure time for parallel Merge Sort
    start = high_resolution_clock::now();
    parallelMergeSort(arr_copy, 0, n - 1);
    stop = high_resolution_clock::now();
    auto par_merge_time = duration_cast<milliseconds>(stop - start).count();

    // Output the timings
    cout << "Sequential Bubble Sort Time: " << seq_bubble_time << " ms" << endl;
    cout << "Parallel Bubble Sort Time: " << par_bubble_time << " ms" << endl;
    cout << "Sequential Merge Sort Time: " << seq_merge_time << " ms" << endl;
    cout << "Parallel Merge Sort Time: " << par_merge_time << " ms" << endl;

    return 0;
}
