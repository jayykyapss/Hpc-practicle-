#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

class Graph {
    int V;
    vector<vector<int>> adj;

public:
    Graph(int V) : V(V), adj(V) {}

    void addEdge(int u, int v) {
        adj[u].push_back(v);
    }

    void parallelBFS(int source) {
        vector<bool> visited(V, false);
        queue<int> q;

        visited[source] = true;
        q.push(source);

        #pragma omp parallel
        {
            while (!q.empty()) {
                int u;
                #pragma omp critical
                {
                    u = q.front();
                    q.pop();
                }
                #pragma omp for
                for (int v : adj[u]) {
                    if (!visited[v]) {
                        visited[v] = true;
                        #pragma omp critical
                        {
                            q.push(v);
                        }
                    }
                }
            }
        }
    }

    void parallelDFSUtil(int v, vector<bool>& visited) {
        visited[v] = true;

        #pragma omp parallel for
        for (int u : adj[v]) {
            if (!visited[u]) {
                parallelDFSUtil(u, visited);
            }
        }
    }

    void parallelDFS(int source) {
        vector<bool> visited(V, false);
        parallelDFSUtil(source, visited);
    }
};

int main() {
    int V = 5;
    Graph g(V);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);

    cout << "Parallel BFS Traversal: ";
    g.parallelBFS(0);
    cout << endl;

    cout << "Parallel DFS Traversal: ";
    g.parallelDFS(0);
    cout << endl;

    return 0;
}
